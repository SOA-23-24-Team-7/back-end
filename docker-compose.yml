version: '3.9'

services:
  explorer:
    build:
      dockerfile: Dockerfile
      context: .
      target: final
    restart: on-failure
    networks:
      - database
      - microservice
    ports:
      - "8080:80"
    environment:
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
    depends_on:
      - database
      - tour-service
      - blog-service
      - stakeholders-service
  database:
    image: postgres:13
    restart: always
    networks:
      - database
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: explorer
    volumes:
      - type: volume
        source: database-data
        target: /var/lib/postgresql/data
      - type: bind
        source: src/Resources/data.sql
        target: /tmp/explorer-init.sql
    ports:
      - "5434:5432"
  tour-service:
    build:
      dockerfile: Dockerfile
      context: ../tour-service
    restart: on-failure
    networks:
      - tours-database
      - microservice
    ports:
      - "8087:8087"
    depends_on:
      - tours-database
  tours-database:
    image: postgres:13
    restart: always
    networks:
      - tours-database
    environment:
      POSTGRES_PASSWORD: super
      POSTGRES_USER: postgres
      POSTGRES_DB: soa-tours
    volumes:
      - type: volume
        source: tours-data
        target: /var/lib/postgresql/data
    ports:
      - "5433:5432"
  blog-service:
    build:
      dockerfile: Dockerfile
      context: ../blog-service
    restart: on-failure
    networks:
      - blog-database
      - microservice
    ports:
      - "8088:8088"
    depends_on:
      - blog-database
  blog-database:
    image: mongo
    container_name: blog-database
    ports:
      - 27018:27017
    networks:
      - blog-database
    volumes:
      - blog-data:/data/db
  follower-service:
    build:
      dockerfile: Dockerfile
      context: ../follower-service
    restart: on-failure
    networks:
      - follower-database
      - microservice
    ports:
      - "8095:8095"
    depends_on:
      - follower-database
  follower-database:
    image: neo4j:latest
    restart: always
    networks:
      - follower-database
    environment:
      NEO4J_AUTH: neo4j/password
    volumes:
      - type: volume
        source: follower-data
        target: /data
    ports:
      - "7474:7474"
      - "7687:7687"
  stakeholders-service:
    build:
      context: ../stakeholders-service
    restart: on-failure
    networks:
      - microservice
    ports:
      - "8082:8082"
  prometheus:
    image: prom/prometheus:v2.35.0
    restart: on-failure
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus:/var/lib/prometheus
    networks:
      - monitoring
  grafana:
    image: grafana/grafana-enterprise
    restart: on-failure
    ports:
     - "3000:3000"
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - monitoring
  node-exporter:
    image: prom/node-exporter:v1.1.2
    restart: on-failure
    ports:
      - "9100:9100"
     networks:
       - monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    ports:
      - "9080:8080"
    volumes:
      - /:/rootfs:ro
      #- /var/run:/var/run:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw #fix
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring
volumes:
  database-data:
    name: explorer
  tours-data:
    name: explorer-tours
  blog-data:
    name: explorer-blog
  follower-data:
    name: explorer-follower
  prometheus:
    name: prometheus
  grafana:
    name: grafana

networks:
  database:
    name: database
    driver: bridge
  tours-database:
    name: tours-database
    driver: bridge
  blog-database:
    name: blog-database
    driver: bridge
  follower-database:
    name: follower-database
    driver: bridge
  microservice:
    name: microservice
    driver: bridge
  monitoring:
    name: monitoring
    driver: bridge